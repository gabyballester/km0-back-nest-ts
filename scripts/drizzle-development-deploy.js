#!/usr/bin/env node

/**
 * Script de deployment de desarrollo para Drizzle ORM
 * Versi√≥n: 1.0 - Migraciones seguras para desarrollo
 * √öltima actualizaci√≥n: $(date)
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Funci√≥n helper para obtener variables de entorno de forma segura
function getEnvVar(key, defaultValue = '') {
  return process.env[key] || defaultValue;
}

// Funci√≥n helper para verificar el entorno
function getEnvironment() {
  return getEnvVar('NODE_ENV', 'development');
}

console.log('üöÄ Iniciando deployment de desarrollo con Drizzle ORM (v1.0)...');

// Funci√≥n para ejecutar comandos de forma segura
function safeExec(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    execSync(command, {
      stdio: 'inherit',
      env: { ...process.env, FORCE_COLOR: '1' },
    });
    console.log(`‚úÖ ${description} completado`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${description} fall√≥: ${error.message}`);
    return false;
  }
}

// Funci√≥n para verificar si hay migraciones en el proyecto
function hasMigrations() {
  const migrationsPath = path.join(process.cwd(), 'drizzle');
  if (!fs.existsSync(migrationsPath)) {
    return false;
  }

  const sqlFiles = fs
    .readdirSync(migrationsPath)
    .filter(file => file.endsWith('.sql'));
  return sqlFiles.length > 0;
}

// Funci√≥n para verificar si hay migraciones pendientes
function hasPendingMigrations() {
  try {
    console.log('üîç Verificando migraciones pendientes...');

    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'development' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      // En desarrollo, SSL es opcional
      databaseUrl += (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=prefer';
      process.env.DATABASE_URL = databaseUrl;
    }

    // Usar drizzle-kit check para verificar diferencias
    const result = execSync('npx drizzle-kit check', {
      encoding: 'utf8',
      env: { ...process.env, DATABASE_URL: databaseUrl },
    });

    // Si hay diferencias, hay migraciones pendientes
    const hasPending =
      result.includes('‚ùå') ||
      result.includes('error') ||
      result.includes('diff');
    console.log(`üìã Migraciones pendientes: ${hasPending ? 'S√ç' : 'NO'}`);
    return hasPending;
  } catch (error) {
    console.log(
      '‚ö†Ô∏è  No se pudieron verificar migraciones pendientes:',
      error.message,
    );
    return false;
  }
}

// Funci√≥n para verificar el estado de la base de datos
function checkDatabaseState() {
  try {
    console.log('üîç Verificando estado de la base de datos...');

    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'development' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      databaseUrl += (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=prefer';
      process.env.DATABASE_URL = databaseUrl;
    }

    // Usar drizzle-kit check para verificar conectividad
    const result = execSync('npx drizzle-kit check', {
      encoding: 'utf8',
      env: { ...process.env, DATABASE_URL: databaseUrl },
    });

    console.log('‚úÖ Base de datos accesible y esquema detectado');
    return true;
  } catch (error) {
    console.log('‚ùå No se pudo verificar el estado de la base de datos');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// Funci√≥n para generar migraciones de forma segura
function generateMigrations() {
  try {
    console.log('üìù Generando migraciones...');

    // Verificar si hay cambios en el esquema
    if (!safeExec('npx drizzle-kit check', 'Verificando esquema')) {
      console.log('‚ö†Ô∏è  No hay cambios en el esquema para migrar');
      return false;
    }

    // Generar migraciones
    if (!safeExec('npx drizzle-kit generate', 'Generando migraciones')) {
      throw new Error('No se pudieron generar las migraciones');
    }

    console.log('‚úÖ Migraciones generadas exitosamente');
    return true;
  } catch (error) {
    console.log('‚ùå Error generando migraciones:', error.message);
    return false;
  }
}

// Funci√≥n para aplicar migraciones de forma segura
function applyMigrations() {
  try {
    console.log('üîÑ Aplicando migraciones...');

    // Asegurar que la URL tenga SSL en desarrollo
    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'development' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      databaseUrl += (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=prefer';
      process.env.DATABASE_URL = databaseUrl;
    }

    // Verificar migraciones pendientes antes de aplicar
    if (!hasPendingMigrations()) {
      console.log('‚ÑπÔ∏è  No hay migraciones pendientes para aplicar');
      return true;
    }

    execSync('npx drizzle-kit migrate', {
      stdio: 'inherit',
      env: { ...process.env, DATABASE_URL: databaseUrl },
    });

    console.log('‚úÖ Migraciones aplicadas exitosamente');
    return true;
  } catch (error) {
    console.log('‚ùå Error aplicando migraciones:', error.message);
    return false;
  }
}

// Funci√≥n para sincronizar esquema (solo si el usuario lo confirma)
function syncSchema() {
  try {
    console.log('‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è  ADVERTENCIA ‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è');
    console.log('üîÑ Sincronizaci√≥n de esquema solicitada...');
    console.log(
      '‚ö†Ô∏è  Esta operaci√≥n puede modificar la estructura de la base de datos',
    );
    console.log('‚ö†Ô∏è  ¬øEst√°s seguro de que quieres continuar? (y/N)');

    // En desarrollo, podemos hacer sync autom√°tico pero con advertencia
    console.log('üîÑ Procediendo con sincronizaci√≥n (modo desarrollo)...');

    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'development' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      databaseUrl += (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=prefer';
      process.env.DATABASE_URL = databaseUrl;
    }

    execSync('npx drizzle-kit push', {
      stdio: 'inherit',
      env: { ...process.env, DATABASE_URL: databaseUrl },
    });

    console.log('‚úÖ Esquema sincronizado exitosamente');
    return true;
  } catch (error) {
    console.log('‚ùå Error sincronizando esquema:', error.message);
    return false;
  }
}

// Funci√≥n para validar el estado final
function validateFinalState() {
  try {
    console.log('üîç Validando estado final...');

    // Verificar que la base de datos est√© accesible
    try {
      if (!checkDatabaseState()) {
        console.log('‚ö†Ô∏è  Base de datos no accesible, pero continuando...');
      }
    } catch (error) {
      console.log(
        '‚ö†Ô∏è  Error verificando base de datos, pero continuando:',
        error.message,
      );
    }

    // Verificar que no haya migraciones pendientes
    try {
      if (hasPendingMigrations()) {
        console.log('‚ö†Ô∏è  Quedan migraciones pendientes, pero continuando...');
      }
    } catch (error) {
      console.log(
        '‚ö†Ô∏è  Error verificando migraciones pendientes, pero continuando:',
        error.message,
      );
    }

    console.log('‚úÖ Estado final validado');
    return true;
  } catch (error) {
    console.log(
      '‚ö†Ô∏è  Error en validaci√≥n final, pero continuando:',
      error.message,
    );
    return true; // No fallar el deployment por errores de validaci√≥n
  }
}

function deployDevelopment() {
  try {
    // üö® VALIDACI√ìN: Verificar entorno de desarrollo
    const nodeEnv = getEnvironment();
    const databaseOrm = getEnvVar('DATABASE_ORM', 'drizzle');

    if (nodeEnv === 'development') {
      console.log('üö® ========================================');
      console.log('üõ†Ô∏è  DEPLOYMENT DE DESARROLLO DETECTADO');
      console.log('========================================');
      console.log(`üóÑÔ∏è  ORM configurado: ${databaseOrm.toUpperCase()}`);
      console.log('‚ö†Ô∏è  Verificando configuraci√≥n de base de datos...');
    }

    // Verificar que estamos usando Drizzle
    if (databaseOrm !== 'drizzle') {
      console.error(
        '‚ùå ERROR: DATABASE_ORM debe ser "drizzle" para este script',
      );
      throw new Error('ORM incorrecto configurado');
    }

    // 1. Verificar estado inicial de la base de datos
    const databaseExists = checkDatabaseState();
    const hasProjectMigrations = hasMigrations();

    console.log(`üìã Estado inicial detectado:`);
    console.log(`   - Base de datos existe: ${databaseExists ? 'S√ç' : 'NO'}`);
    console.log(
      `   - Migraciones en proyecto: ${hasProjectMigrations ? 'S√ç' : 'NO'}`,
    );

    // 2. Estrategia de deployment para desarrollo
    console.log('üéØ Iniciando estrategia de deployment para desarrollo...');

    // Opci√≥n 1: Si hay migraciones en el proyecto
    if (hasProjectMigrations) {
      console.log('üì¶ Estrategia: Usar migraciones existentes');

      // Verificar si hay migraciones pendientes
      if (hasPendingMigrations()) {
        console.log('üîÑ Aplicando migraciones pendientes...');
        if (!applyMigrations()) {
          throw new Error('No se pudieron aplicar las migraciones');
        }
      } else {
        console.log('‚ÑπÔ∏è  No hay migraciones pendientes');
      }
    } else {
      console.log('üÜï Estrategia: Generar y aplicar migraciones');

      // Generar migraciones si no existen
      if (!generateMigrations()) {
        console.log(
          '‚ö†Ô∏è  No se pudieron generar migraciones, intentando sincronizaci√≥n...',
        );

        // Fallback: sincronizar esquema (con advertencia)
        if (!syncSchema()) {
          throw new Error('No se pudo sincronizar el esquema');
        }
      } else {
        // Aplicar las migraciones generadas
        if (!applyMigrations()) {
          throw new Error('No se pudieron aplicar las migraciones generadas');
        }
      }
    }

    // 3. Validaci√≥n final
    console.log('üîç Validando estado final...');

    try {
      if (!validateFinalState()) {
        console.log('‚ö†Ô∏è  Validaci√≥n final no exitosa, pero continuando...');
      }
    } catch (error) {
      console.log(
        '‚ö†Ô∏è  Error en validaci√≥n final, pero deployment puede continuar:',
        error.message,
      );
    }

    // 4. √âxito
    console.log('üéâ ========================================');
    console.log('‚úÖ DEPLOYMENT DE DESARROLLO COMPLETADO');
    console.log('========================================');
    console.log('üìä Resumen:');
    console.log('   - Migraciones generadas/aplicadas');
    console.log('   - Esquema sincronizado (si fue necesario)');
    console.log('   - Datos existentes preservados');
    console.log('   - Deployment listo para desarrollo');
    console.log('========================================');
  } catch (error) {
    console.error('‚ùå ========================================');
    console.error('üí• ERROR CR√çTICO EN DEPLOYMENT DE DESARROLLO');
    console.error('========================================');
    console.error(`‚ùå Error: ${error.message}`);
    console.error('üí• Deployment fall√≥');
    console.error('========================================');
    process.exit(1);
  }
}

// Ejecutar deployment
deployDevelopment();
