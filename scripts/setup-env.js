#!/usr/bin/env node

/**
 * Script para configurar archivos de entorno
 * Uso: node scripts/setup-env.js
 *
 * ESTRATEGIA:
 * - .env: Variables base para PRODUCCI√ìN
 * - .env.development: Solo variables espec√≠ficas de desarrollo
 * - .env.test: Solo variables espec√≠ficas de testing
 */

const fs = require('fs');
const path = require('path');

function setupEnvironment() {
  try {
    console.log('üîß Configurando archivos de entorno...\n');

    const envFiles = [
      {
        name: '.env',
        example: 'env.example',
        description: 'Variables base para PRODUCCI√ìN',
      },
      {
        name: '.env.development',
        example: 'env.development.example',
        description: 'Variables espec√≠ficas de desarrollo (sobrescribe .env)',
      },
      {
        name: '.env.test',
        example: 'env.test.example',
        description: 'Variables espec√≠ficas de testing (sobrescribe .env)',
      },
    ];

    let createdCount = 0;
    let existingCount = 0;
    let missingCount = 0;

    envFiles.forEach(({ name, example, description }) => {
      try {
        const examplePath = path.join(process.cwd(), example);
        const envPath = path.join(process.cwd(), name);

        if (fs.existsSync(examplePath) && !fs.existsSync(envPath)) {
          fs.copyFileSync(examplePath, envPath);
          console.log(`‚úÖ Creado: ${name} (${description})`);
          createdCount++;
        } else if (fs.existsSync(envPath)) {
          console.log(`‚ö†Ô∏è  Ya existe: ${name}`);
          existingCount++;
        } else {
          console.log(`‚ùå No se encontr√≥: ${example}`);
          missingCount++;
        }
      } catch (error) {
        console.error(`‚ùå Error procesando ${name}:`, error.message);
        missingCount++;
      }
    });

    console.log('\nüìä Resumen:');
    console.log(`‚úÖ Creados: ${createdCount}`);
    console.log(`‚ö†Ô∏è  Existentes: ${existingCount}`);
    console.log(`‚ùå Faltantes: ${missingCount}`);

    console.log('\nüìã Estrategia de configuraci√≥n de entornos:');
    console.log('‚úÖ .env - Variables base para PRODUCCI√ìN');
    console.log('‚úÖ .env.development - Sobrescribe variables para desarrollo');
    console.log('‚úÖ .env.test - Sobrescribe variables para testing');

    console.log('\nüîó URLs configuradas:');
    console.log(
      '- Desarrollo: postgresql://postgres:admin@localhost:5432/km0_db_dev',
    );
    console.log(
      '- Testing: postgresql://postgres:admin@localhost:5432/km0_db_test',
    );
    console.log(
      '- Producci√≥n: postgresql://user:password@host:port/database_name',
    );

    console.log('\nüöÄ Comandos disponibles:');
    console.log('npm run start:dev      # Desarrollo con hot reload');
    console.log('npm run start:test     # Testing');
    console.log('npm run db:dev         # Sincronizar DB desarrollo');
    console.log('npm run db:test        # Sincronizar DB testing');
    console.log('npm run db:prod        # Sincronizar DB producci√≥n');
    console.log('npm run db:studio:dev  # Ver DB desarrollo');
    console.log('npm run db:studio:test # Ver DB testing');
    console.log('npm run db:studio:prod # Ver DB producci√≥n');

    console.log('\nüìñ NestJS ConfigModule:');
    console.log('‚úÖ Carga autom√°ticamente .env seg√∫n NODE_ENV');
    console.log('‚úÖ Variables espec√≠ficas sobrescriben las base');
    console.log('‚úÖ Validaci√≥n con Zod en tiempo de ejecuci√≥n');
    console.log('‚úÖ Orden de carga: .env ‚Üí .env.{NODE_ENV}');

    if (missingCount > 0) {
      console.log('\n‚ö†Ô∏è  Algunos archivos de ejemplo no se encontraron');
      console.log('   Verifica que existan los archivos env.*.example');
    }

    return { createdCount, existingCount, missingCount };
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message);
    throw error;
  }
}

function main() {
  try {
    setupEnvironment();
    console.log('\n‚úÖ Configuraci√≥n de entorno completada');
  } catch (error) {
    console.error('‚ùå Error en la configuraci√≥n:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { setupEnvironment, main };
