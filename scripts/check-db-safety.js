#!/usr/bin/env node

/**
 * Script de validaci√≥n de seguridad para comandos de base de datos
 * Verifica que no se usen comandos peligrosos en producci√≥n
 */

const { execSync } = require('child_process');

console.log('üõ°Ô∏è Verificando seguridad de comandos de base de datos...');

// Comandos peligrosos que NUNCA deben usarse en producci√≥n
const DANGEROUS_COMMANDS = [
  'prisma migrate dev',
  'prisma migrate reset',
  'prisma db push --force-reset',
  'prisma db push --accept-data-loss',
];

// Comandos seguros para producci√≥n
const SAFE_COMMANDS = [
  'prisma migrate deploy',
  'prisma db push',
  'prisma generate',
  'prisma validate',
];

function checkEnvironment() {
  const nodeEnv = process.env.NODE_ENV;

  console.log(`üåç Entorno detectado: ${nodeEnv || 'development'}`);

  if (nodeEnv === 'production') {
    console.log(
      'üö® PRODUCCI√ìN detectada - Validaciones de seguridad activadas',
    );
    return true;
  }

  console.log('‚úÖ Entorno de desarrollo - Validaciones relajadas');
  return false;
}

function checkPackageScripts() {
  console.log('\nüìã Verificando scripts de package.json...');

  try {
    const packageJson = require('../package.json');
    const scripts = packageJson.scripts;

    let hasDangerousScripts = false;
    let dangerousScripts = [];

    Object.entries(scripts).forEach(([name, command]) => {
      const isDangerous = DANGEROUS_COMMANDS.some(dangerous =>
        command.includes(dangerous),
      );

      if (isDangerous) {
        // Verificar si es un script de desarrollo (aceptable)
        const isDevScript = name.includes('dev') || name.includes('test');
        const isSafeContext =
          command.includes('--create-only') ||
          command.includes('--accept-data-loss');

        if (!isDevScript && !isSafeContext) {
          console.log(`‚ùå Script peligroso detectado: ${name}`);
          console.log(`   Comando: ${command}`);
          dangerousScripts.push({ name, command });
          hasDangerousScripts = true;
        } else {
          console.log(`‚ö†Ô∏è  Script de desarrollo detectado: ${name}`);
          console.log(`   Comando: ${command}`);
          console.log(`   ‚úÖ ACEPTABLE para desarrollo/testing`);
        }
      }
    });

    if (!hasDangerousScripts) {
      console.log('‚úÖ No se detectaron scripts peligrosos para producci√≥n');
    }

    return !hasDangerousScripts;
  } catch (error) {
    console.error('‚ùå Error al verificar package.json:', error.message);
    return false;
  }
}

function checkProductionScript() {
  console.log('\nüîç Verificando script de producci√≥n...');

  try {
    const fs = require('fs');
    const productionScript = fs.readFileSync(
      './scripts/production-deploy.js',
      'utf8',
    );

    // Verificar que use comandos seguros
    const usesSafeCommands = SAFE_COMMANDS.some(safe =>
      productionScript.includes(safe),
    );

    // Verificar que NO use comandos peligrosos
    const usesDangerousCommands = DANGEROUS_COMMANDS.some(
      dangerous =>
        productionScript.includes(dangerous) &&
        !productionScript.includes('--create-only'),
    );

    if (usesSafeCommands && !usesDangerousCommands) {
      console.log('‚úÖ Script de producci√≥n usa comandos seguros');
      return true;
    } else {
      console.log('‚ùå Script de producci√≥n usa comandos peligrosos');
      return false;
    }
  } catch (error) {
    console.error('‚ùå Error al verificar script de producci√≥n:', error.message);
    return false;
  }
}

function main() {
  const isProduction = checkEnvironment();
  const packageSafe = checkPackageScripts();
  const productionSafe = checkProductionScript();

  console.log('\nüìä Resumen de seguridad:');
  console.log(`   - Entorno: ${isProduction ? 'PRODUCCI√ìN' : 'DESARROLLO'}`);
  console.log(
    `   - Package.json: ${packageSafe ? '‚úÖ SEGURO' : '‚ùå PELIGROSO'}`,
  );
  console.log(
    `   - Script producci√≥n: ${productionSafe ? '‚úÖ SEGURO' : '‚ùå PELIGROSO'}`,
  );

  if (isProduction && (!packageSafe || !productionSafe)) {
    console.log('\nüö® ERRORES DE SEGURIDAD DETECTADOS');
    console.log(
      '‚ùå No se puede proceder con comandos peligrosos en producci√≥n',
    );
    process.exit(1);
  }

  if (packageSafe && productionSafe) {
    console.log('\n‚úÖ TODOS LOS COMANDOS SON SEGUROS');
    console.log('üõ°Ô∏è Base de datos protegida');
  } else {
    console.log('\n‚ö†Ô∏è ADVERTENCIAS DETECTADAS');
    console.log('üîß Revisar comandos antes de usar en producci√≥n');
  }
}

main();
