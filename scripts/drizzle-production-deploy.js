#!/usr/bin/env node

/**
 * Script de deployment para producci√≥n usando Drizzle ORM
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Funci√≥n helper para obtener variables de entorno de forma segura
function getEnvVar(key, defaultValue = '') {
  return process.env[key] || defaultValue;
}

// Funci√≥n helper para verificar el entorno
function getEnvironment() {
  return getEnvVar('NODE_ENV', 'development');
}

console.log('üöÄ Iniciando deployment de producci√≥n con Drizzle ORM...');

// Funci√≥n para ejecutar comandos de forma segura
function safeExec(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    execSync(command, {
      stdio: 'inherit',
      env: { ...process.env, FORCE_COLOR: '1' },
    });
    console.log(`‚úÖ ${description} completado`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${description} fall√≥: ${error.message}`);
    return false;
  }
}

// Funci√≥n para aplicar migraciones de forma segura
function applyMigrations() {
  try {
    console.log('üîÑ Aplicando migraciones existentes...');

    // Asegurar que la URL tenga SSL en producci√≥n
    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'production' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      databaseUrl +=
        (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=require';
      process.env.DATABASE_URL = databaseUrl;
    }

    execSync('npx drizzle-kit migrate', {
      stdio: 'inherit',
      env: { ...process.env, DATABASE_URL: databaseUrl },
    });

    console.log('‚úÖ Migraciones aplicadas exitosamente');
    return true;
  } catch (error) {
    console.log('‚ùå Error aplicando migraciones:', error.message);
    return false;
  }
}

// Funci√≥n para verificar si la base de datos existe y tiene tablas
function checkDatabaseExists() {
  try {
    console.log('üîç Verificando estado de la base de datos...');

    // En producci√≥n, forzar SSL en la URL si no est√° presente
    let databaseUrl = process.env.DATABASE_URL;
    if (
      process.env.NODE_ENV === 'production' &&
      databaseUrl &&
      !databaseUrl.includes('sslmode=')
    ) {
      databaseUrl +=
        (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=require';
      process.env.DATABASE_URL = databaseUrl;
    }

    const result = execSync(
      'npx drizzle-kit introspect --url "$DATABASE_URL"',
      {
        encoding: 'utf8',
        env: { ...process.env, DATABASE_URL: databaseUrl },
      },
    );

    console.log('üìä Base de datos accesible');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  No se pudo verificar el estado de la base de datos');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// Funci√≥n para verificar si hay migraciones en el proyecto
function hasMigrations() {
  const migrationsPath = path.join(process.cwd(), 'drizzle');
  return (
    fs.existsSync(migrationsPath) &&
    fs.readdirSync(migrationsPath).filter(file => file.endsWith('.sql'))
      .length > 0
  );
}

function deployProduction() {
  try {
    // üö® VALIDACI√ìN CR√çTICA: Verificar entorno de producci√≥n
    const nodeEnv = getEnvironment();
    const databaseOrm = getEnvVar('DATABASE_ORM', 'drizzle');

    if (nodeEnv === 'production') {
      console.log('üö® ========================================');
      console.log('üõ°Ô∏è  DEPLOYMENT DE PRODUCCI√ìN DETECTADO');
      console.log('========================================');
      console.log(`üóÑÔ∏è  ORM configurado: ${databaseOrm.toUpperCase()}`);
      console.log('‚ö†Ô∏è  Verificando seguridad de base de datos...');
    }

    // Verificar que estamos usando Drizzle
    if (databaseOrm !== 'drizzle') {
      console.error(
        '‚ùå ERROR: DATABASE_ORM debe ser "drizzle" para este script',
      );
      throw new Error('ORM incorrecto configurado');
    }

    // 1. Generar migraciones si no existen
    if (!hasMigrations()) {
      console.log('üìù Generando migraciones iniciales...');
      if (!safeExec('npx drizzle-kit generate', 'Generando migraciones')) {
        throw new Error('No se pudieron generar las migraciones');
      }
    }

    // 2. Verificar configuraci√≥n SSL
    console.log('üîí Verificando configuraci√≥n SSL...');
    try {
      require('./check-ssl-config.js');
    } catch (error) {
      console.warn(
        '‚ö†Ô∏è  No se pudo verificar la configuraci√≥n SSL:',
        error.message,
      );
    }

    // 3. Verificar esquema
    if (!safeExec('npx drizzle-kit check', 'Verificando esquema de Drizzle')) {
      throw new Error('Esquema de Drizzle inv√°lido');
    }

    // 3. Verificar estado de la base de datos
    const databaseExists = checkDatabaseExists();
    const hasProjectMigrations = hasMigrations();

    console.log(`üìã Estado detectado:`);
    console.log(`   - Base de datos existe: ${databaseExists ? 'S√ç' : 'NO'}`);
    console.log(
      `   - Migraciones en proyecto: ${hasProjectMigrations ? 'S√ç' : 'NO'}`,
    );

    // 4. Estrategia seg√∫n el estado
    if (hasProjectMigrations) {
      // Siempre usar migraciones si existen
      console.log('üì¶ Aplicando migraciones existentes...');
      if (!applyMigrations()) {
        throw new Error('No se pudieron aplicar las migraciones');
      }
    } else {
      // Solo usar push si no hay migraciones
      console.log('üÜï Sin migraciones - Sincronizando esquema...');

      // Asegurar que la URL tenga SSL en producci√≥n
      let databaseUrl = process.env.DATABASE_URL;
      if (
        process.env.NODE_ENV === 'production' &&
        databaseUrl &&
        !databaseUrl.includes('sslmode=')
      ) {
        databaseUrl +=
          (databaseUrl.includes('?') ? '&' : '?') + 'sslmode=require';
        process.env.DATABASE_URL = databaseUrl;
      }

      if (!safeExec('npx drizzle-kit push', 'Sincronizando esquema')) {
        console.log('‚ö†Ô∏è  Fallback: Intentando con migraciones manuales...');
        // Fallback: generar y aplicar migraciones
        if (
          safeExec(
            'npx drizzle-kit generate',
            'Generando migraciones de fallback',
          )
        ) {
          applyMigrations();
        } else {
          throw new Error(
            'No se pudo sincronizar el esquema ni generar migraciones',
          );
        }
      }
    }

    // 5. Verificaci√≥n final
    console.log('‚úÖ Deployment completado exitosamente');
    console.log(
      'üéâ Deployment de producci√≥n con Drizzle completado exitosamente!',
    );
  } catch (error) {
    console.error('‚ùå Error cr√≠tico en deployment:', error.message);
    console.error('üí• Deployment fall√≥');
    process.exit(1);
  }
}

// Ejecutar deployment
deployProduction();
